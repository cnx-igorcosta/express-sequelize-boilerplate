#!/usr/bin/env node
"use strict"

/**
 * Module dependencies.
 */

const app = require("../app")
const http = require("http")


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.APP_PORT || "3000")
app.set("port", port)


/**
 * Create HTTP server.
 */

let server = http.createServer(app)


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) // named pipe
    return val

  if (port >= 0) // port number
    return port

  return false
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen")
    throw error

  let bind = typeof port === "string"
           ? `Pipe ${port}`
           : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error("%s requires elevated privileges", bind)
      process.exit(1)
      break

    case "EADDRINUSE":
      console.error("%s is already in use", bind)
      process.exit(1)
      break

    default:
      throw error
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address()
  let bind = typeof addr === "string"
           ? `pipe ${addr}`
           : `port ${addr.port}`
  console.info("Listening on", bind)
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on("error", onError)
server.on("listening", onListening)
